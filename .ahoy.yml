---
ahoyapi: v2

commands:

  # Docker commands.
  build:
    usage: Build or rebuild project.
    cmd: |
      ahoy title "Building project"
      ahoy pre-flight
      ahoy clean
      ahoy build-network
      ahoy up -- --build --force-recreate
      ahoy title "Build complete"
      ahoy doctor
      ahoy info 1

  build-network:
    usage: Ensure that the amazeeio network exists.
    cmd: |
      ahoy title "Creating amazeeio Docker network"
      docker network prune -f > /dev/null
      docker network inspect amazeeio-network > /dev/null || docker network create amazeeio-network

  info:
    usage: Print information about this project.
    cmd: |
      ahoy line "Project                  : " ${PROJECT}
      ahoy line "Site local URL           : " ${LAGOON_LOCALDEV_URL}
      ahoy line "DB port on host          : " $(docker port $(sh bin/docker-compose.sh ps -q postgres) 5432 | cut -d : -f 2)
      ahoy line "Solr port on host        : " $(docker port $(sh bin/docker-compose.sh ps -q solr) 8983 | cut -d : -f 2)
      ahoy line "Mailhog URL              : " http://mailhog.docker.amazee.io/

  up:
    usage: Build and start Docker containers.
    cmd: |
      ahoy title "Building and starting Docker containers"
      sh bin/docker-compose.sh up -d "$@"
      echo "Initialising database schema"
      ahoy cli '"${APP_DIR}"/bin/init.sh'
      echo "Waiting for containers to start listening..."
      for i in `seq 1 60`; do
        if (ahoy cli "timeout 1 bash -c 'cat < /dev/null > /dev/tcp/ckan/5000'"); then
          echo "CKAN became ready on attempt $i"
          break
        else
          echo "CKAN not yet ready, retrying (attempt $i)..."
          sleep 1
        fi
      done
      if sh bin/docker-compose.sh logs | grep -q "\[Error\]"; then exit 1; fi
      if sh bin/docker-compose.sh logs | grep -q "Exception"; then exit 1; fi
      docker ps -a --filter name=^/${COMPOSE_PROJECT_NAME}_
      export DOCTOR_CHECK_CLI=0

  down:
    usage: Stop Docker containers and remove container, images, volumes and networks.
    cmd: |
      ahoy title 'Stopping and removing old containers, images, volumes, networks'
      if [ -f "docker-compose.yml" ]; then sh bin/docker-compose.sh down --volumes; fi

  start:
    usage: Start existing Docker containers.
    cmd: sh bin/docker-compose.sh start "$@"

  stop:
    usage: Stop running Docker containers.
    cmd: sh bin/docker-compose.sh stop "$@"

  restart:
    usage: Restart all stopped and running Docker containers.
    cmd: sh bin/docker-compose.sh restart "$@"

  logs:
    usage: Show Docker logs.
    cmd: |
        ahoy title "Output logs"
        # Loop through each container and wrap with github log groups
        services=$(bin/docker-compose.sh ps --services)
        for service in $services; do
          echo "::group::$service"
          sh bin/docker-compose.sh logs "$service"
          echo "::endgroup::"
        done

  pull:
    usage: Pull latest docker images.
    cmd: if [ ! -z "$(docker image ls -q)" ]; then docker image ls --format \"{{.Repository}}:{{.Tag}}\" | grep ckan/ckan- | grep -v none | xargs -n1 docker pull | cat; fi

  cli:
    usage: Start a shell inside CLI container or run a command.
    cmd: |
      CKAN_CONTAINER=$(sh bin/docker-compose.sh ps -q ckan)
      if [ "${#}" -ne 0 \]; then
        docker exec $CKAN_CONTAINER sh -c '. "${APP_DIR}"/bin/activate; cd $APP_DIR;'" $*"
      else
        docker exec $CKAN_CONTAINER sh -c '. "${APP_DIR}"/bin/activate && cd $APP_DIR && sh'
      fi

  doctor:
    usage: Find problems with current project setup.
    cmd: bin/doctor.sh "$@"

  install-site:
    usage: Install test site data.
    cmd: |
      ahoy title "Installing a fresh site"
      ahoy cli '"${APP_DIR}"/bin/init.sh && "${APP_DIR}"/bin/create-test-data.sh'

  clean:
    usage: Remove containers and all build files.
    cmd: |
      ahoy title "Cleaning up old builds"
      ahoy down
      # Remove other directories.
      # @todo: Add destinations below.
      rm -rf \
        ./ckan

  reset:
    usage: "Reset environment: remove containers, all build, manually created and Drupal-Dev files."
    cmd: |
      ahoy clean
      git ls-files --others -i --exclude-from=.git/info/exclude | xargs chmod 777
      git ls-files --others -i --exclude-from=.git/info/exclude | xargs rm -Rf
      find . -type d -not -path "./.git/*" -empty -delete

  flush-redis:
    usage: Flush Redis cache.
    cmd: docker exec -i $(sh bin/docker-compose.sh ps -q redis) redis-cli flushall > /dev/null

  lint:
    usage: Lint code.
    cmd: |
      ahoy title 'Check for lint'
      ahoy cli "flake8 ${@:-ckanext}" || \
      [ "${ALLOW_LINT_FAIL:-0}" -eq 1 ]

  copy-local-files:
    usage: Update files from local repo.
    cmd: |
      docker cp . $(sh bin/docker-compose.sh ps -q ckan):/srv/app/
      docker cp bin/ckan_cli $(sh bin/docker-compose.sh ps -q ckan):/usr/bin/
      ahoy cli 'chmod -v u+x /usr/bin/ckan_cli "${APP_DIR}"/bin/*; cp -v .docker/test.ini $CKAN_INI; "${APP_DIR}"/bin/process-config.sh'

  pip-list:
    usage: List pip install version details
    cmd: |
      ahoy cli 'pip list'

  test:
    usage: Run test suite
    cmd: |
      ahoy lint
      ahoy test-unit
      ahoy install-site
      ahoy test-bdd

  test-unit:
    usage: Run unit tests.
    cmd: |
      ahoy title 'Run unit tests'
      ahoy cli 'pytest -vv --ckan-ini=${CKAN_INI} --cov=ckanext "${APP_DIR}"/ckanext --junit-xml=test/junit/results.xml' || \
      [ "${ALLOW_UNIT_FAIL:-0}" -eq 1 ]

  test-bdd:
    usage: Run BDD tests.
    cmd: |
      ahoy title 'Run scenario tests'
      ahoy cli "rm -f test/screenshots/*"
      ahoy start-mailmock &
      sleep 5
      JUNIT_OUTPUT="--junit --junit-directory=test/junit/"
      if [ "$BEHAVE_TAG" = "" ]; then
        if [ "$CKAN_TYPE" != "custom" ]; then
          BEHAVE_TAG="--tags=-custom"
        fi
        (ahoy cli "behave $JUNIT_OUTPUT -k ${*:-test/features} --tags=smoke" \
         && ahoy cli "behave $JUNIT_OUTPUT -k ${*:-test/features} $BEHAVE_TAG --tags=-smoke"
        ) || [ "${ALLOW_BDD_FAIL:-0}" -eq 1 ]
      else
        # run tests with the specified tag
        ahoy cli "behave $JUNIT_OUTPUT -k ${*:-test/features} --tags=$BEHAVE_TAG" \
          || [ "${ALLOW_BDD_FAIL:-0}" -eq 1 ]
      fi
      ahoy stop-mailmock

  start-mailmock:
    usage: Starts email mock server used for email BDD tests
    cmd: |
      ahoy title 'Starting mailmock'
      ahoy cli 'mailmock -p 8025 -o "${APP_DIR}"/test/emails' # for debugging mailmock email output remove --no-stdout

  stop-mailmock:
    usage: Stops email mock server used for email BDD tests
    cmd: |
      ahoy title 'Stopping mailmock'
      ahoy cli "killall -2 mailmock"

  # Utilities.
  title:
    cmd: printf "$(tput -Txterm setaf 4)==> ${1}$(tput -Txterm sgr0)\n"
    hide: true

  line:
    cmd: printf "$(tput -Txterm setaf 2)${1}$(tput -Txterm sgr0)${2}\n"
    hide: true

  getvar:
    cmd: eval echo "${@}"
    hide: true

  pre-flight:
    cmd: |
      export DOCTOR_CHECK_DB=${DOCTOR_CHECK_DB:-1}
      export DOCTOR_CHECK_TOOLS=${DOCTOR_CHECK_TOOLS:-1}
      export DOCTOR_CHECK_PORT=${DOCTOR_CHECK_PORT:-0}
      export DOCTOR_CHECK_PYGMY=${DOCTOR_CHECK_PYGMY:-1}
      export DOCTOR_CHECK_CLI=${DOCTOR_CHECK_CLI:-0}
      export DOCTOR_CHECK_SSH=${DOCTOR_CHECK_SSH:-0}
      export DOCTOR_CHECK_WEBSERVER=${DOCTOR_CHECK_WEBSERVER:-0}
      export DOCTOR_CHECK_BOOTSTRAP=${DOCTOR_CHECK_BOOTSTRAP:-0}
      ahoy doctor
    hide: true

entrypoint:
  - bash
  - "-c"
  - "-e"
  - |
    export LAGOON_LOCALDEV_URL=http://$PROJECT.docker.amazee.io
    [ -f .env ] && [ -s .env ] && export $(grep -v '^#' .env | xargs) && if [ -f .env.local ] && [ -s .env.local ]; then export $(grep -v '^#' .env.local | xargs); fi
    bash -e -c "$0" "$@"
  - "{{cmd}}"
  - "{{name}}"
